---
title: "Overview"
bibliography: references.bib
format:
  html: 
    df-print: kable
    code-fold: show
    code-summary: "Hide code"
    code-overflow: wrap
    toc-title: Page Contents
    toc: true
    toc-depth: 2
    toc-location: right
    number-sections: false
    html-math-method: katex
    smooth-scroll: true
editor: source
editor_options: 
  chunk_output_type: console
---
```{=html}
<style type="text/css">

body, td {
   font-size: 13pt;
}
code.r{
  font-size: 9pt;
}
pre {
  font-size: 11pt
}
</style>
```

::: {.callout-note icon=false}
#### Supporting Information (*in review*) 
This site provides a demonstrative workflow and supporting information for the publication:  
**Mechanistic Insights into the 2014-2015 Vesicular Stomatitis Outbreak in the United States: A SEIR-SEI Compartmental Model Analysis**  
  
Authors:  
Humphreys, Pelzel-McCluskey, Shults, Velazquez Salinas, Bertram, McGregor, Cohnstaedt, Swanson, Scroggs, Peters, and Rodriguez       
  
An interactive dashboard to demonstrate the described SEIR-SEI model is available:
[ShinyApps site: https://geoepi.shinyapps.io/seir-vector/](https://geoepi.shinyapps.io/seir-vector/)  
  
All code and data are available for download:    
[GitHub site: https://github.com/geoepi/seir-vector](https://github.com/geoepi/seir-vector)    
  
Additional supporting information and documents available on the Open Science Framework:  
[Project OSF site: TBD](https://osf.io/hf8t2/)    
  
:::

  
### Navigation  
The menu at right can be used to navigate through the workflow.    


## Needed Libraries  
```{r warning=FALSE, message=FALSE}
library(here) # to manage directories
library(tidyverse) # data wrangling
library(ggdist) # visualizations
library(rstan) # interface with Stan from R
rstan_options(auto_write = TRUE) # options
options(mc.cores = parallel::detectCores())

library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
register_knitr_engine()

# custom functions
source(here("./R/utilities.R"))
source_dir("./R")
```

## Observed Incidence  
Observed incidence data is loaded and visualized.

```{r}
truth_df <- readRDS(here("assets/vsv_ind_truth.rds")) %>%
  filter(year == 2014)

str(truth_df)
```


```{r fig.width=8, fig.height=6}
#| label: fig-incidence
#| fig-cap: "Observed VS incidence 2014."
#| 
plot_incidence(truth_df)
```

## Formula 
Model Parameters:  

$$\begin{align} 
    \lambda_h &= \upsilon_h \cdot \beta_h \cdot \frac{I_v}{N_v} \\ 
    \lambda_v &= \upsilon_v \cdot \beta_v \cdot \frac{I_h}{N_h} \\ 
    \frac{dS_h}{dt} &= -\lambda_h \cdot S_h \\ 
    \frac{dE_h}{dt} &=  \lambda_h \cdot S_h - \sigma_h \cdot E_h \\ 
    \frac{dI_h}{dt} &= \sigma_h \cdot E_h \cdot \rho_h - \gamma_h \cdot I_h \\ 
    \frac{dR_h}{dt} &=  \gamma_h \cdot I_h  \\ \nonumber
    \frac{dS_v}{dt} &= \mu_v \cdot N_v - \lambda_v \cdot S_v - \mu_v \cdot S_v \\ 
    \frac{dE_v}{dt} &= \lambda_v \cdot S_v - (\sigma_v + \mu_v) \cdot E_v \\ 
    \frac{dI_v}{dt} &=  \sigma_v \cdot E_v \cdot \rho_v - \mu_v \cdot I_v \\ \nonumber
\end{align}$$  

## Exploratory Model  
Before coding a Stan model, exploring parameters through construction of a relatively simple Ordinary Differential Equations (ODE) model using the **deSolve** package.

### Parameter Values  
```{r}
initial_parameters <- 
  c(
    beta_h = 0.95,
    gamma_h = 0.10,
    sigma_h = 0.25,
    sigma_v = 0.4,
    rho_h = 0.3,
    rho_v = 0.85,
    beta_v =0.85,
    mu_v = 0.1,
    upsilon_h = 0.6,
    upsilon_v = 0.35,
    kappa = 0.30
  )

```

### Initial Conditions
```{r}
N_h <- sum(truth_df$count) + sum(truth_df$susc)
Eh <- 0
Ih <- 1
N_v <- 300*N_h
Ev <- 0
Iv <- 1

initial_conditions <- 
  c(
    Eh = Eh,
    Ih = Ih,
    Sh = N_h - Eh - Ih,
    Rh = 0,
    Ev = Ev,
    Iv = Iv,
    Sv = N_v - Iv - Ev
  )

```
  
### ODE Function   
```{r}
seirsei_ode <- function(t, state, parameters) {
  with(as.list(c(state, parameters)), {
    
    lambda_h = upsilon_h * beta_h * Iv / N_v
    lambda_v = upsilon_v * beta_v * Ih / N_h
    
    dSh = -lambda_h * Sh
    dEh = lambda_h * Sh - sigma_h * Eh
    dIh = sigma_h * Eh*rho_h - gamma_h * Ih
    dRh = gamma_h * Ih
    dSv = mu_v * N_v - lambda_v * Sv - mu_v * Sv
    dEv = lambda_v * Sv - (sigma_v + mu_v) * Ev
    dIv = sigma_v * Ev*rho_v - mu_v * Iv
    
    return(list(c(dSh, dEh, dIh, dRh, dSv, dEv, dIv)))
  })
}

```

### Run ODE Model
```{r eval=FALSE}
out <- as.data.frame(
  ode(y = initial_conditions, times = times, func = seirsei_ode, parms = initial_parameters)
)

```

### Plot Results

## Stan Model
  
### NegBinomial Sampling 
Sampling from NegBinonial...
$$\begin{align} \nonumber
    \text{Y}_{t}|\theta &\sim \text{NegBinomial}(\text{Y}|\Delta\text{I}_{t}\kappa, \phi) \\ \nonumber
    \theta &= \{\upsilon_h,\upsilon_v, \beta_h, \beta_v, \sigma_h, \sigma_v, \gamma_h, \mu, \rho, \kappa\} \\ \nonumber 
    \upsilon_h &\sim \text{Lognormal}(log(0.25), 0.1) \\ \nonumber
    \upsilon_v &\sim \text{Lognormal}(log(0.15), 0.1) \\ \nonumber
    \beta_h &\sim \text{Beta}(10, 1) \\ \nonumber
    \beta_v &\sim \text{Beta}(1, 10) \\ 
    \sigma_h &\sim \text{Lognormal}(log(0.15), 0.1) \\ \nonumber
    \sigma_v &\sim \text{Lognormal}(log(0.3), 0.1) \\ \nonumber
    \rho_h &\sim \text{Beta}(10, 100) \\ \nonumber
    \rho_v &\sim \text{Beta}(5, 10) \\ \nonumber
    \gamma_h &\sim \text{Lognormal}(log(0.085), 0.1) \\ \nonumber
    \mu &\sim \text{Lognormal}(log(0.1), 0.1) \\ \nonumber
    \kappa &\sim \text{Beta}(5, 10) \\ \nonumber
    {1}/{\phi} &\sim \text{Exponential}(2) \\ \nonumber
\end{align}$$  


### Stan Code
```stan
functions {
  real[] seirsei(real t, real[] y, real[] theta, 
             real[] x_r, int[] x_i) {

      real N_h = x_i[1];
     
      real beta_h = theta[1];
      real gamma_h = theta[2];
      real sigma_h = theta[3];
      real sigma_v = theta[4];
      real rho_h = theta[5];
	  real rho_v = theta[6];
      real beta_v = theta[7];
      real mu_v = theta[8];
	  real upsilon_h = theta[9];
	  real upsilon_v = theta[10];
      real i_0 = theta[11];
      real e_0 = theta[12];
      real ev_0 = theta[13];
      real iv_0 = theta[14];
      real N_v = theta[15];
      
      real init[7] = {N_h - i_0 - e_0, e_0, i_0, 0, N_v - iv_0 - ev_0, ev_0, iv_0}; 
      real Sh = y[1] + init[1];
      real Eh = y[2] + init[2];
      real Ih = y[3] + init[3];
      real Rh = y[4] + init[4];
      real Sv = y[5] + init[5];
      real Ev = y[6] + init[6];
      real Iv = y[7] + init[7];
	  
	  real lambda_h = upsilon_h * beta_h * Iv / N_v;
      real lambda_v = upsilon_v * beta_v * Ih / N_h;
	  
	  real dS_dt = -lambda_h * Sh;
      real dE_dt =  lambda_h * Sh - sigma_h * Eh;
      real dI_dt = sigma_h * Eh*rho_h - gamma_h * Ih;
      real dR_dt =  gamma_h * Ih;
	  
	  real dSv_dt = mu_v*N_v - lambda_v*Sv - mu_v*Sv;
      real dEv_dt = lambda_v*Sv - (sigma_v + mu_v)*Ev;
      real dIv_dt =  sigma_v * Ev*rho_v - mu_v*Iv;
     
      return {dS_dt, dE_dt, dI_dt, dR_dt, dSv_dt, dEv_dt, dIv_dt};
  }
}
data {
  int<lower=1> n_days;
  real t0;
  real ts[n_days];
  int N_h;
  int N_v;
  int cases[n_days];
}
transformed data {
  real x_r[0];
  int x_i[1] = { N_h };
}
parameters {
  real<lower=0, upper=1> beta_h;
  real<lower=0> gamma_h;
  real<lower=0> sigma_h;
  real<lower=0> sigma_v;
  real<lower=0, upper=1> rho_h;
  real<lower=0, upper=1> rho_v;
  real<lower=0, upper=1> beta_v;
  real<lower=0> mu_v;
  real<lower=0> upsilon_h;
  real<lower=0> upsilon_v;
  real<lower=0> phi_inv;
  real<lower=0, upper=1> kappa;
  real<lower=0> i_0; 
  real<lower=0> e_0; 
  real<lower=0> ev_0; 
  real<lower=0> iv_0; 
}
transformed parameters{
  real y[n_days, 7];
  real incidence[n_days - 1];
  real phi = 1. / phi_inv;
  real theta[15] = {beta_h, gamma_h, sigma_h, sigma_v, rho_h, rho_v, beta_v, mu_v, upsilon_h, upsilon_v, i_0, e_0, ev_0, iv_0, N_v};
  y = integrate_ode_rk45(seirsei, rep_array(0.0, 7), t0, ts, theta, x_r, x_i);
  for (i in 1:n_days-1){
    incidence[i] = -(y[i+1, 2] - y[i, 2] + y[i+1, 1] - y[i, 1])*kappa + 1e-8;
  }
}
model {
  beta_h ~ beta(10, 1);
  gamma_h ~ lognormal(log(0.15), 0.1);  
  sigma_h ~ lognormal(log(0.17), 0.1);
  sigma_v ~ lognormal(log(0.3), 0.1);
  rho_h ~ beta(10, 100);
  rho_v ~ beta(5, 10); 
  beta_v ~ beta(1, 10);
  mu_v ~ lognormal(log(0.1), 0.1);
  upsilon_h ~ lognormal(log(0.25), 0.1);
  upsilon_v ~ lognormal(log(0.15), 0.1);
  phi_inv ~ exponential(2);
  kappa ~ beta(15, 100);
  i_0 ~ lognormal(0, 0.1);
  e_0 ~ lognormal(0, 0.1);
  ev_0 ~ lognormal(0, 0.1);
  iv_0 ~ lognormal(0, 0.1);

  cases[1:(n_days-1)] ~ neg_binomial_2(incidence, phi);
}
generated quantities {
  real duration = 1 / gamma_h;
  real incub_h = 1 / sigma_h;
  real incub_v = 1/ sigma_v;
  real log_lik[n_days-1];
  real pred_infected[n_days-1];
  
  pred_infected = neg_binomial_2_rng(incidence, phi);
  
  for (i in 1:(n_days - 1)) {
    log_lik[i] = neg_binomial_2_lpmf(cases[i] | incidence[i], phi);
  }
}
```


## Prior Predictive
   